{"entries":[{"timestamp":1728439979937,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" id=\".MASw4iLqK5;.796_#h`\" x=\"0\" y=\"0"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"pe=\""],[-1,"DFRobot_GS01_getGestureType\" id=\"tauK*BiQlgMleiB-Dvbm\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"-3\" y=\"50"],[1,"device_forever"],[0,"\"></"]],"start1":92,"start2":92,"length1":127,"length2":22},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,","],[0,"\n    "],[-1,"    \"DFRobot_GS01.ts\",\n        \"_locales/en/DFRobot_GS01-strings.json\",\n        \"_locales/en/DFRobot_GS01-jsdoc-strings.json\",\n        \"_locales/zh-CN/DFRobot_GS01-strings.json\",\n        \"_locales/zh-CN/DFRobot_GS01-jsdoc-strings.json\",\n        \"_locales/zh-TW/DFRobot_GS01-strings.json\",\n        \"_locales/zh-TW/DFRobot_GS01-jsdoc-strings.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":227,"start2":227,"length1":440,"length2":44}]},{"type":"added","filename":"test.ts","value":"// 在此处测试；当此软件包作为插件使用时，将不会编译此软件包。\n"},{"type":"added","filename":"DFRobot_GS01.ts","value":"\n/**\n* 使用此文件来定义自定义函数和图形块。\n* 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom\n*/\n\n// GS01 Configuration Register Addresses\nlet REG_GS01_ADDR = 0x00  ///< Device address register\nlet REG_GS01_BAUDRATE = 0x01  ///< Baud rate configuration register\nlet REG_GS01_VERIFY_AND_STOP = 0x02  ///< Parity and stop bits configuration register\nlet REG_GS01_FACE_THRESHOLD = 0x03  ///< Face detection threshold, X coordinate\nlet REG_GS01_FACE_SCORE_THRESHOLD = 0x04  ///< Face score threshold\nlet REG_GS01_GESTURE_SCORE_THRESHOLD = 0x05 ///< Gesture score threshold\n\n// GS01 Data Register Addresses\nlet REG_GS01_PID = 0x00  ///< Product ID register\nlet REG_GS01_VID = 0x01  ///< Vendor ID register\nlet REG_GS01_HW_VERSION = 0x02  ///< Hardware version register\nlet REG_GS01_SW_VERSION = 0x03  ///< Software version register\nlet REG_GS01_FACE_NUMBER = 0x04  ///< Number of detected faces\nlet REG_GS01_FACE_LOCATION_X = 0x05  ///< Face X coordinate\nlet REG_GS01_FACE_LOCATION_Y = 0x06  ///< Face Y coordinate\nlet REG_GS01_FACE_SCORE = 0x07  ///< Face score\nlet REG_GS01_GESTURE_TYPE = 0x08  ///< Gesture type\nlet REG_GS01_GESTURE_SCORE = 0x09  ///< Gesture score\n\nlet INPUT_REG_OFFSET = 0x06  ///< Input register offset\n\nlet _addr = 0x72\n\n\n\n\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"Ã\"\nnamespace DFRobot_GS01 {\n    /**\n     * @brief Enumeration for UART parity configuration.\n     */\n    export enum ParityConfig {\n        UART_CFG_PARITY_NONE = 0,  ///< No parity\n        UART_CFG_PARITY_ODD = 1,       ///< Odd parity\n        UART_CFG_PARITY_EVEN = 2,      ///< Even parity\n        UART_CFG_PARITY_MARK = 3,      ///< Mark parity\n        UART_CFG_PARITY_SPACE = 4,     ///< Space parity\n    }\n\n    export enum BaudConfig {\n        //% block=\"eBaud_1200\"\n        Baud_1200 = 1,     ///< Baud rate 1200\n        //% block=\"eBaud_2400\"\n        Baud_2400 = 2,         ///< Baud rate 2400\n        Baud_4800 = 3,         ///< Baud rate 4800\n        Baud_9600 = 4,         ///< Baud rate 9600\n        Baud_14400 = 5,        ///< Baud rate 14400\n        Baud_19200 = 6,        ///< Baud rate 19200\n        Baud_38400 = 7,        ///< Baud rate 38400\n        Baud_57600 = 8,        ///< Baud rate 57600\n        Baud_115200 = 9,       ///< Baud rate 115200\n        Baud_230400 = 10,       ///< Baud rate 230400\n        Baud_460800 = 11,       ///< Baud rate 460800\n        Baud_921600 = 12,       ///< Baud rate 921600\n    }\n\n\n\n    /**\n     * @brief Enumeration for UART stop bits configuration.\n     */\n    export enum Stopbits {\n        UART_CFG_STOP_BITS_0_5 = 0, ///< 0.5 stop bits\n        UART_CFG_STOP_BITS_1 = 1,       ///< 1 stop bit\n        UART_CFG_STOP_BITS_1_5 = 2,     ///< 1.5 stop bits\n        UART_CFG_STOP_BITS_2 = 3,       ///< 2 stop bits\n    }\n\n\n    export function functionconfigUart(baud: BaudConfig, parity: ParityConfig, stopBit: Stopbits): number {\n\n        let verifyAndStop = (parity << 8) | (stopBit & 0xff);\n\n        writeIHoldingReg(REG_GS01_BAUDRATE, baud)\n        writeIHoldingReg(REG_GS01_VERIFY_AND_STOP, verifyAndStop)\n        return 1\n    }\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    export function setFaceDetectThres(score: number): boolean {\n\n\n\n        return writeIHoldingReg(REG_GS01_FACE_SCORE_THRESHOLD, score)\n    }\n\n    export function setDetectThres(x: number): boolean {\n        return writeIHoldingReg(REG_GS01_FACE_THRESHOLD, x)\n    }\n\n    export function setGestureDetectThres(score: number): boolean {\n\n        return writeIHoldingReg(REG_GS01_GESTURE_SCORE_THRESHOLD, score)\n\n    }\n    //% block\n    export function begin(addr: number): void {\n        _addr = addr\n    }\n\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    export function getGs01Pid(): number {\n\n        return reaInputdReg(REG_GS01_PID)\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    export function getGs01Vid(): number {\n\n        return reaInputdReg(REG_GS01_VID)\n    }\n    /**\n     * TODO: Get the number of faces\n     */\n    //% block\n    export function getFaceNumber(): number {\n\n        return reaInputdReg(REG_GS01_FACE_NUMBER)\n    }\n\n    /**\n     * TODO: Get face X-coordinate\n     */\n    //% block\n    export function getFaceLocationX(): number {\n\n        return reaInputdReg(REG_GS01_FACE_LOCATION_X)\n    }\n    /**\n     * TODO: Get face Y-coordinate\n     */\n    //% block\n    export function getFaceLocationY(): number {\n\n        return reaInputdReg(REG_GS01_FACE_LOCATION_Y)\n    }\n\n    export function getFaceScore(): number {\n\n        return reaInputdReg(REG_GS01_FACE_SCORE)\n    }\n    /**\n     * TODO: Get gesture type\n     */\n    //% block\n    export function getGestureType(): number {\n\n        return reaInputdReg(REG_GS01_GESTURE_TYPE)\n    }\n    export function getGestureScore(): number {\n\n        return reaInputdReg(REG_GS01_GESTURE_SCORE)\n    }\n\n\n\n\n    export function readReg(reg: number): number {\n\n\n        let sendBuffer = pins.createBuffer(6)\n\n        sendBuffer[0] = reg >> 8\n        sendBuffer[1] = reg & 0xff\n\n        pins.i2cWriteBuffer(_addr, sendBuffer)\n        basic.pause(50)//10 ms\n        let lenBuf = pins.i2cReadBuffer(_addr, 2)\n        let value = lenBuf[1] << 8 | lenBuf[0]\n        return value\n    }\n\n    export function wirteReg(reg: number, data: number): boolean {\n        let sendBuffer = pins.createBuffer(6)\n        sendBuffer[0] = reg >> 8\n        sendBuffer[1] = reg & 0xff\n        sendBuffer[2] = data >> 8\n        sendBuffer[3] = data & 0xff\n        pins.i2cWriteBuffer(_addr, sendBuffer)\n        return true\n    }\n    export function writeIHoldingReg(reg: number, data: number): boolean {\n\n\n        return wirteReg(reg, data)\n    }\n    export function reaInputdReg(reg: number): number {\n        return readReg(INPUT_REG_OFFSET + reg)\n    }\n    export function readHoldingReg(reg: number): number {\n        return readReg(reg)\n    }\n\n\n}"}]}],"snapshots":[{"timestamp":1728439979936,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-DFRobot_GS01\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1728440570877}